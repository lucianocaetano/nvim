syntax enable
set clipboard+=unnamedplus
set termguicolors
set noundofile

set autoindent
set cursorline                                     " Highlight the current line

set hidden                                         " When on a buffer becomes hidden when it is abandoned
set path+=**
set nowrap
set encoding=UTF-8

set number relativenumber

set smartindent
set smarttab
set expandtab
set tabstop=2 softtabstop=2
set shiftwidth=2

set expandtab
set smartcase
set incsearch
set nohlsearch
set completeopt=menuone,noinsert,noselect
set signcolumn=yes
set colorcolumn=80
highlight ColorColumn ctermbg=0 guibg=lightgrey

set noswapfile
set nobackup
set undofile

set foldcolumn=1   " Muestra una columna con el estado de plegado
set foldmethod=syntax      " Plegado basado en la sintaxis del archivo
set foldlevel=99           " Mantener bloques desplegados por defecto
set foldenable

call plug#begin(stdpath('data').'/plugged')
Plug 'godlygeek/tabular'
Plug 'preservim/vim-markdown'

Plug 'David-Kunz/gen.nvim'
Plug 'Exafunction/codeium.vim'

Plug 'lukas-reineke/indent-blankline.nvim'

Plug 'nvim-lua/plenary.nvim'

Plug 'tpope/vim-fugitive'

Plug 'mfussenegger/nvim-dap'

Plug 'lukas-reineke/indent-blankline.nvim'

Plug 'Mofiqul/dracula.nvim'
Plug 'sheerun/vim-polyglot'
"Plug 'edkolev/tmuxline.vim'
Plug 'neoclide/coc-java', {'do': 'yarn install --frozen-lockfile'}
Plug 'nvim-telescope/telescope.nvim', {'do': ':UpdateRemotePlugins'}
" Markdown
Plug 'arnaud-lb/vim-php-namespace'
Plug '/yaegassy/coc-htmldjango'
Plug 'posva/vim-vue'
Plug 'vim-python/python-syntax'
Plug 'codota/tabnine-nvim', { 'do': './dl_binaries.sh' }
Plug 'neoclide/coc-snippets'
Plug 'robhudson/snipmate_for_django'
" neoformat formateador de codigo para multiples lenguajes
" Plug 'sbdchd/neoformat'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'-- Ruta donde se instala lazy.nvim
Plug 'vim-autoformat/vim-autoformat'

" NERDTree
Plug 'preservim/nerdtree'

" VIM-DEVICONS icons for NERDTree
Plug 'ryanoasis/vim-devicons'
" Use release branch (recommended)
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'nvim-telescope/telescope.nvim', {'do': ':UpdateRemotePlugins'}

" Surround.vim
Plug 'tpope/vim-surround'
" Airline status bar

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Prisma Support
Plug 'prisma/vim-prisma'

" NERDCommenter
Plug 'preservim/nerdcommenter'

Plug 'morhetz/gruvbox'
Plug 'catppuccin/nvim', { 'as': 'catppuccin' }
Plug 'olivercederborg/poimandres.nvim'
Plug 'rose-pine/neovim', { 'as': 'rose-pine' }
Plug 'dgox16/oldworld.nvim'
Plug 'sainnhe/sonokai'

Plug 'nvim-telescope/telescope.nvim', {'do': ':UpdateRemotePlugins'}
Plug 'nvim-telescope/telescope-ui-select.nvim'

Plug 'David-Kunz/gen.nvim'
call plug#end()


let g:coc_global_extensions = [
                  \ 'coc-cfn-lint',
                  \ 'coc-pyright',
                  \ 'coc-tsserver',
                  \ 'coc-emmet',
                  \ 'coc-prisma',
                  \ 'coc-cspell-dicts',
                  \ 'coc-angular',
                  \ 'coc-deno',
                  \ 'coc-diagnostic',
                  \ 'coc-docker',
                  \ 'coc-java',
                  \ 'coc-json',
                  \ 'coc-markdownlint',
                  \ 'coc-metals',
                  \ 'coc-prettier',
                  \ 'coc-snippets',
                  \ 'coc-spell-checker',
                  \ 'coc-vetur',
                  \ 'coc-yaml',
                  \ 'coc-pairs',
                  \ 'coc-explorer',
                  \ 'coc-css',
                  \ 'coc-eslint',
                  \ 'coc-prettier',
                  \ 'coc-highlight',
                  \ 'coc-phpls',
                  \ 'coc-python'
                  \ ]


let g:coc_disable_startup_warning = 0


function! CheckBackspace() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Highlight the symbol and its references when holding the cursor

" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline

" Mappings for CoCList
" Show all diagnostics

inoremap <silent><expr> <CR> codeium#Accept()
" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                  \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)


" Use <c-space> to trigger completion
if has('nvim')
      inoremap <silent><expr> <c-space> coc#refresh()
else
      inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)



" Formatting selected code
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)



" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <leader>ac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
nmap <leader>as  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
      nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
      nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
      inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
      inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
      vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
      vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)


nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>p

nnoremap <F2> :NERDTreeToggle<CR>
nnoremap <F3> :bprevious<CR>
nnoremap <F4> :bnext<CR>
nnoremap <F5> :bdelete<CR>
nnoremap <F1> :Neoformat<CR>

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>


" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/'  }  }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1"

" enable tabline
let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#left_sep = ''
" let g:airline#extensions#tabline#left_alt_sep = ''
" let g:airline#extensions#tabline#right_sep = ''
" let g:airline#extensions#tabline#right_alt_sep = ''


" enable powerline fonts
let g:airline_powerline_fonts = 1
" let g:airline_left_sep = ''
" let g:airline_right_sep = ''

" Always show tabs
set showtabline=2

colorscheme sonokai

autocmd FileType php inoremap <Leader>u <Esc>:call IPhpInsertUse()<CR>
autocmd FileType php noremap <Leader>u :call PhpInsertUse()<CR>
autocmd BufRead,BufNewFile *.vue,*.js,*.tsx,*.jsx setlocal shiftwidth=2 softtabstop=2
autocmd BufRead,BufNewFile *.php,*.py setlocal shiftwidth=4 softtabstop=4
autocmd CursorHold * silent call CocActionAsync('highlight')
autocmd FileType php inoremap <Leader>s <Esc>:call PhpSortUse()<CR>
autocmd FileType php noremap <Leader>s :call PhpSortUse()<CR>

let g:php_namespace_sort_after_insert = 1
let g:python_highlight_all = 1
let g:python_highlight_builtins = 1
let g:python_highlight_builtin_funcs_kwarg = 1
let g:python_highlight_exceptions = 1
let g:python_highlight_string_formatting = 1
let g:python_highlight_string_format = 1
let g:python_highlight_string_templates = 1
let g:python_highlight_indent_errors = 1
let g:python_highlight_space_errors = 1
let g:python_highlight_doctests = 1
let g:python_highlight_class_vars = 1
let g:python_highlight_file_headers_as_comments = 1
let g:python_highlight_operators = 1
let g:python_highlight_exceptions = 1
let g:python_highlight_string_formatting = 1
let g:python_highlight_string_format = 1
let g:python_highlight_indent_errors = 1
let g:python_highlight_func_calls = 1
let g:python_highlight_class_vars = 1
let g:python_highlight_operators = 1
let g:python_highlight_file_headers_as_comments = 1
let g:python_highlight_builtins = 1

let g:fzf_vim = {}
let g:fzf_history_dir = '~/.cache/fzf'
let g:fzf_layout = {
                  \ 'window': {
                  \ 'width': 0.89,
                  \ 'height': 0.84,
                  \ }
                  \ }

let $FZF_DEFAULT_OPTS="--info=inline --preview-window=bottom:50% --prompt='> '"

lua << EOF
opts = {
      model = "deepseek-coder", -- The default model to use.
      display_mode = "split",
      
      quit_map = "q", -- set keymap to close the response window
      retry_map = "<c-r>", -- set keymap to re-send the current prompt
      accept_map = "<c-cr>", -- set keymap to replace the previous selection with the last result
      host = "localhost", -- The host running the Ollama service.
      port = "11434", -- The port on which the Ollama service is listening.
      show_prompt = true, -- Shows the prompt submitted to Ollama. Can be true (3 lines) or "full".
      show_model = true, -- Displays which model you are using at the beginning of your chat session.
      no_auto_close = false, -- Never closes the window automatically.
      file = false, -- Write the payload to a temporary file to keep the command short.
      hidden = false, -- Hide the generation window (if true, will implicitly set `prompt.replace = true`), requires Neovim >= 0.10
      init = function(options) pcall(io.popen, "ollama serve > /dev/null 2>&1 &") end,
      -- Function to initialize Ollama
      command = function(options)
      local body = {model = options.model, stream = true}
      return "curl --silent --no-buffer -X POST http://" .. options.host .. ":" .. options.port .. "/api/chat -d $body"
      end,
      -- The command for the Ollama service. You can use placeholders $prompt, $model and $body (shellescaped).
      -- This can also be a command string.
      -- The executed command must return a JSON object with { response, context }
      -- (context property is optional).
      -- list_models = '<omitted lua function>', -- Retrieves a list of model names
      result_filetype = "markdown", -- Configure filetype of the result buffer
      debug = true -- Prints errors and the command which is run.
}

require('gen').setup(opts)
EOF
